#########################
##CLOUD HOSTING VERSION##
#########################



project-root/
│
├── backend/
│   ├── config/
│   │   ├── firebaseConfig.js        # Firebase Admin SDK initialization
|   |
|   ├── controllers/                 # Handles request processing and business logic
│   │   ├── authController.js        # Logic for authentication-related endpoints
│   │   ├── parentController.js      # Logic for parent-specific endpoints
│   │   ├── leaderController.js      # Logic for leader-specific endpoints
│   │   ├── sharedController.js      # Logic for shared endpoints between Parent and Leader
|   |
│   ├── routes/
│   │   ├── authRoute.js             # Authentication endpoints (register, login)
│   │   ├── parentRoute.js           # Parent-specific endpoints
│   │   ├── leaderRoute.js           # Leader-specific endpoints
│   │   ├── sharedRoute.js           # Shared endpoints between Parent and Leader
│   │
│   ├── services/
│   │   ├── authService.js           # Authentication service (register/login logic)
│   │   ├── troopService.js          # Troop-related logic
│   │   ├── documentService.js       # Document-related logic
│   │
│   ├── utils/
│   │   ├── roleCheck.js             # Middleware for role-based access
│   │   ├── fileUpload.js            # Helper for file uploads to Firebase Storage
│   │
│   ├── server.js                    # Express app setup
│   ├── package.json                 # Dependencies
│   ├── .env                         # Environment variables
│   ├── README.md                    # Documentation


Route -> Controller -> Service

Route: Endpoint tied to that CRUD operation
Controller: Making the enpoint request
Service: perform the request


############
Config Folder
    firebaseConfig.js
        Purpose: This file is responsible for initializing the Firebase Admin SDK and configuring access to Firebase services such as Firestore, Storage, and Authentication.
        Key Responsibilities:
            Set up Firebase with the credentials from your service account.
            Initialize Firestore for database access.
            Set up Firebase Storage for handling file uploads.
            Set up Firebase Authentication for managing user authentication.
############
Routes Folder: The routes folder contains all the routing logic that maps incoming HTTP requests to corresponding controller functions. It handles the paths and HTTP methods (GET, POST, PUT, DELETE) but does not contain the business logic itself. Each route is specific to the user role or shared functionalities.
    authRoute.js
        Purpose: Handles the routing for authentication-related actions, including user registration, login, and authentication checks.
        Key Responsibilities:
            Define routes for user registration and login (e.g., POST /register, POST /login).
            Direct the requests to the corresponding controller functions that manage authentication logic.
    parentRoute.js
        Purpose: Contains routes specific to actions that can be performed by parent users.
        Key Responsibilities:
            Define routes for adding a trooper, uploading documents, viewing parent-specific information, etc.
            Routes direct requests to the parent controller functions.
    leaderRoute.js
        Purpose: Contains routes specific to actions that can be performed by leader users.
        Key Responsibilities:
            Define routes for managing troops, rewards, etc., that are specific to the leader role.
            Routes direct requests to the leader controller functions.
    sharedRoute.js
        Purpose: Contains routes that are shared between parent and leader users.
        Key Responsibilities:
            Handle shared functions like notifications, order submissions, or viewing common data.
            Routes direct requests to the shared controller functions.          
############
Controller Folder: The controllers folder contains the business logic for handling the requests routed from the routes folder. Controllers are responsible for processing data, interacting with services, and returning the correct response to the client.
    authController.js
        Purpose: Contains the logic for handling user authentication and registration.
        Key Responsibilities:
            Register a new user (create account).
            Log in an existing user.
            Handle JWT generation and validation.
            Perform any necessary role-based access controls.
    parentController.js
        Purpose: Handles parent-specific business logic.
        Key Responsibilities:
            Logic for adding and managing troopers.
            Logic for document uploads and handling.
            Fetching parent-specific data, such as profiles or settings.
    leaderController.js
        Purpose: Handles leader-specific business logic.
        Key Responsibilities:
            Managing troops and associated data.
            Logic for managing rewards and sale data.
            Leader-specific notifications.
    sharedController.js
        Purpose: Contains the shared logic for features common between parents and leaders.
        Key Responsibilities:
            Fetching and sending notifications.
            Handling shared resources like shared documents or common user data.
############
Services Folder: The services folder contains the actual logic for handling business processes. These services interact directly with databases, Firebase, or other external APIs and perform the necessary actions to fulfill the requests. The controllers call these services to handle the complex logic.
    authService.js
        Purpose: Contains the core logic for user authentication.
        Key Responsibilities:
            Handle user registration, login, and JWT token management.
            Validate user credentials and handle password encryption.
            Manage user sessions and refresh tokens.
    troopService.js
        Purpose: Contains the logic for managing troops and related data.
        Key Responsibilities:
            Add, update, and delete troops in the Firestore database.
            Retrieve and process troop information.
            Manage leader assignments and troop-related logic.
    documentService.js
        Purpose: Handles the document management logic.
        Key Responsibilities:
            Upload documents to Firebase Storage.
            Retrieve and manage documents from Firebase Storage.
            Validate document types and sizes.
    notificationService.js (coming soon)
        Purpose: Will contain logic for sending notifications.
        Key Responsibilities:
            Send push notifications to users (via Firebase Cloud Messaging or another service).
            Manage notification preferences and settings.
            Ensure notifications are sent to relevant users (e.g., leaders, parents).
############
Utils Folder: The utils folder contains helper functions and middleware that can be reused across various parts of the project.
    roleCheck.js
        Purpose: Middleware to check the role of a user and ensure they have the required permissions to access certain routes.
        Key Responsibilities:
            Check if a user has the correct role (parent, leader) to access specific resources.
            Restrict access to sensitive endpoints based on roles.
    fileUpload.js
        Purpose: Helper function for handling file uploads to Firebase Storage.
        Key Responsibilities:
            Validate the file type and size.
            Upload the file to Firebase Storage.
            Provide file metadata or URL once uploaded.
            Server Setup
    server.js
        Purpose: The entry point for the backend server. It initializes Express and other necessary middleware, and sets up routes.
        Key Responsibilities:
            Initialize and configure the Express app.
            Set up middleware for CORS, JSON parsing, etc.
            Start the server and listen for requests.
            Set up Firebase initialization.