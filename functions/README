<a id="readme-top"></a>

<div align="center">
  <h1 align="center">CookieTrack Backend API</h1>
  <p align="center">Backend service powering the CookieTrack application with Express.js and Firebase<br />
    <a href="../README.md"><strong>« Main Documentation</strong></a>
    ·
    <a href="https://github.com/Thin-Mint-Techies/CookieTrack/issues/new?labels=bug&template=bug-report---.md">Report Bug</a>
    ·
    <a href="https://github.com/Thin-Mint-Techies/CookieTrack/issues/new?labels=enhancement&template=feature-request---.md">Request Feature</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->
<details style="cursor: pointer">
  <summary>Table of Contents</summary>
  <ol>
    <li><a href="#overview">Overview</a></li>
    <li><a href="#tech-stack">Tech Stack</a></li>
    <li><a href="#project-structure">Project Structure</a></li>
    <li>
      <a href="#architecture">Architecture</a>
      <ul>
        <li><a href="#request-data-flow">Request Data Flow</a></li>
      </ul>
    </li>
    <li>
      <a href="#getting-started">Getting Started</a>
      <ul>
        <li><a href="#Start development server">Prerequisites</a></li>
        <li><a href="#Push to Firebase Functions">Installation</a></li>
      </ul>
    </li>
  </ol>
</details>

## Overview
The backend service handles all server-side operations including:
- User Authentication & Authorization
- Cookie Inventory Management
- Order Processing
- File Storage
- Notifications
- Analytics
    
## Tech Stack
- "node": "22"
- "@sendgrid/mail": "^8.1.4",
- "axios": "^1.7.9",
- "bcrypt": "^5.1.1",
- "cors": "^2.8.5",
- "dotenv": "^16.4.7",
- "express": "^4.21.2",
- "express-rate-limit": "^7.5.0",
- "firebase": "^11.2.0",
- "firebase-admin": "^12.7.0",
- "firebase-functions": "^6.3.0",
- "jsonwebtoken": "^9.0.2",
- "multer": "^1.4.5-lts.1",
- "nodemailer": "^6.10.0",
- "nodemon": "^3.1.9",
- "xss": "^1.0.15"

## Project Structure
```
functions/
├── dataFromat.js     
├── firebaseConfig.js    
├── index.js     
├── controllers/              
│   ├── authController.js
│   ├── cookieController.js
│   ├── documentController.js
│   ├── inventoryController.js
│   ├── orderController.js
│   ├── rewardController.js
│   ├── saleController.js
│   ├── trooperController.js
│   └── userController.js
├── routes/                  
│   ├── cookieRoute.js
│   ├── documentRoute.js
│   ├── inventoryRoute.js
│   ├── orderRoute.js
│   ├── rewardRoute.js
│   ├── saleDataRoute.js
│   ├── trooperRoute.js
│   └── userRoute.js
├── services/                
│   ├── cookieService.js
│   ├── documentService.js
│   ├── inventoryService.js
│   ├── orderService.js
│   ├── rewardService.js
│   ├── saleDataService.js
│   ├── trooperService.js
│   └── userService.js
├── utils/                    
│   ├── calculation.js
│   ├── emailSender.js
│   ├── fileUpload.js
│   ├── logger.js
│   ├── roleCheck.js
│   └── scheduler.js
├── index.js                 
└── package.json
```

## Architecture 
The backend follows a modular microservice architecture pattern where each component is designed to be independent and focused on a specific business domain:

- **Order Service**: Manages order processing and tracking
- **Inventory Service**: Controls cookie inventory and stock management
- **Reward Service**: Handles scout rewards and achievements
- **Notification Service**: Manages email and notification delivery
- **Document Service**: Handles file uploads and document management

Each service:
- Has its own data model and business logic
- Communicates through well-defined APIs
- Can be deployed and scaled independently
- Maintains its own database collections
- Follows the single responsibility principle

1. **Routes** 
   - Entry point for all API requests
   - Handles request routing and URL mapping
   - Applies middleware (authentication, validation)

2. **Controllers** 
   - Processes HTTP requests and responses
   - Validates input data
   - Coordinates between multiple services
   - Returns appropriate HTTP status codes

3. **Services Layer** 
   - Contains core business logic
   - Handles database operations
   - Manages external service integrations

### Request Data Flow Example
POST /order
↓
Route (orderRoute.js)
  - Validates JWT token
↓
Controller (orderController.js)
  - Validates order data
↓
Services:
  orderService.js
    - Validates order data
    - Checks stock availability
    - Creates order record
    - Calculates totals
    - Updates cookie inventory
    - Sends order confirmations

## Getting Started
1. **Install dependencies:**
```bash
npm install
```

2. **Environment Configuration:**
Create a `.env` file using data from Firebase console and set the following variables:
```env
COOKIETRACK_FIREBASE_TYPE=
COOKIETRACK_FIREBASE_PROJECT_ID=
COOKIETRACK_FIREBASE_PRIVATE_KEY_ID=
COOKIETRACK_FIREBASE_PRIVATE_KEY=
COOKIETRACK_FIREBASE_CLIENT_EMAIL=
COOKIETRACK_FIREBASE_CLIENT_ID=
COOKIETRACK_FIREBASE_AUTH_URI=
COOKIETRACK_FIREBASE_TOKEN_URI=
COOKIETRACK_FIREBASE_AUTH_PROVIDER_CERT_URL=
COOKIETRACK_FIREBASE_CLIENT_CERT_URL=
COOKIETRACK_FIREBASE_UNIVERSE_DOMAIN=
COOKIETRACK_FIREBASE_DB_URL=
COOKIETRACK_FIREBASE_STORAGE_BUCKET=
COOKIETRACK_FIREBASE_API_KEY=
```

3. ** Additional env variables:**
Add these to the `.env` files as needed (from API keys to secret keys):
```env
NODE_ENV=development
SECRET_CODE = 
SENDGRID_API_KEY=
```

### Start development server
1. **Commented out the Firebase function export in index.js:**
```javascript
//exports.api = functions.https.onRequest(app);
```

2. **Run the local server:**
```bash
npx nodemon index.js
```

### Push to Firebase Functions
1. **Commented out the Local server code: **
```javascript
/*
const PORT = process.env.PORT || 5000;
const initializeFirebase = async () => {
  try {
    // Initialize Firebase 
    if (!admin.apps.length) {
      admin.initializeApp(firebaseConfig);
    }
    console.log('Firebase initialized successfully!');

    // Start the Express server
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`Server is running on PORT: ${PORT}`);
    });
  } catch (error) {
    console.error('Error initializing Firebase:', error);
    process.exit(1); // Exit if Firebase initialization fails
  }

};
initializeFirebase();
*/
```

2. **Deploy to Firebase Functions:**
```bash
firebase deploy --only functions
```


<p align="right">(<a href="#readme-top">back to top</a>)</p>